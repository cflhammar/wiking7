{"version":3,"sources":["components/Card/Card.js","components/Board/Board.js","components/HighScore/HighScore.js","components/App/App.js","index.js"],"names":["Card","props","classes","renderCard","bind","flipCard","handleStyle","this","card","isFlipped","value","onFlip","id","style","color","height","fontSize","backgroundColor","found","className","onClick","React","Component","Board","state","flipCounter","renderRow","i","cards","length","map","number","require","config","HighScore","toplist","rounds","time","name","backendURL","getHighScore","renderToplist","addHighScore","handleNameChange","url","fetch","then","response","json","jsonData","setState","alert","type","highScore","entry","index","e","target","placeholder","onChange","App","foundCorrect","flippedCards","numRounds","lowestScore","posted","setBoard","shuffleBoard","checkMatch","resetFlipped","addRound","checkFinished","updateScore","componentDidMount","putHighScore","console","log","newEntry","JSON","stringify","score","method","body","headers","cardsArray","k","push","shuffledArray","clearInterval","interval","setInterval","array","j","Math","floor","random","openCards","filter","onLoad","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b1a3405.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n\r\nclass Card extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.classes = 'card' //, this.props.card.isFlipped, this.props.card.found]\r\n\r\n        this.renderCard = this.renderCard.bind(this);\r\n        this.flipCard = this.flipCard.bind(this);\r\n        this.handleStyle = this.handleStyle.bind(this);\r\n    }\r\n\r\n    renderCard() {\r\n        if (this.props.card.isFlipped) {\r\n            return this.props.card.value;\r\n        } else {\r\n            return '?';\r\n        }\r\n    }\r\n\r\n    flipCard() {\r\n        this.props.onFlip(this.props.card.id);\r\n    }\r\n\r\n    handleStyle() {\r\n        let style = { color: 'black', height: '100px', fontSize: '50px', backgroundColor: 'rgba(200,200,200,0.1)' }\r\n        if (this.props.card.isFlipped) {\r\n            style.color = 'white';\r\n            style.backgroundColor = 'rgba(230,230,230,0.3)';\r\n        }\r\n        if (this.props.card.found) {\r\n            style.backgroundColor = 'rgba(40,240,40,0.3)';\r\n        }\r\n        return style;\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.card)\r\n        return (\r\n            <div key={this.props.card.id} className='cardContainer'>\r\n                <div className='card' style={this.handleStyle()} onClick={this.flipCard} >{this.renderCard()}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;\r\n\r\n//onClick={this.flipCard","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport './Board.css'\r\n\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            flipCounter: 0\r\n        }\r\n        this.renderRow = this.renderRow.bind(this);\r\n    }\r\n\r\n    renderRow(i) {\r\n        return (\r\n            <div key={i} className='rowCardContainer' >\r\n                <Card key={this.props.cards[i].id} onFlip={this.props.onFlip} card={this.props.cards[i]} />\r\n                <Card key={this.props.cards[i + 1].id} onFlip={this.props.onFlip} card={this.props.cards[i + 1]} />\r\n                <Card key={this.props.cards[i + 2].id} onFlip={this.props.onFlip} card={this.props.cards[i + 2]} />\r\n                <Card key={this.props.cards[i + 3].id} onFlip={this.props.onFlip} card={this.props.cards[i + 3]} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n\r\n        //let max = 16;\r\n        //this.setBoard(max);\r\n        if (this.props.cards.length > 5) {\r\n            return (\r\n                <div className='RowContainer'>\r\n                    {[0, 4, 8, 12].map(number => this.renderRow(number))}\r\n                </div>\r\n            );\r\n        }\r\n        return <p></p>\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './HighScore.css';\r\nconst dotenv = require('dotenv');\r\ndotenv.config();\r\n\r\nclass HighScore extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            toplist: { rounds: '', time: '' },\r\n            name: ''\r\n        }\r\n\r\n        this.backendURL = false ? 'http://localhost:5000/' : 'https://wiking7.herokuapp.com/';\r\n\r\n        this.getHighScore = this.getHighScore.bind(this);\r\n        this.renderToplist = this.renderToplist.bind(this);\r\n        this.addHighScore = this.addHighScore.bind(this);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    getHighScore() {\r\n        const url = this.backendURL + 'api/highScore';\r\n        fetch(url, { \"headers\": { \"Content-Type\": \"application/json\" } },)\r\n            .then(response => {\r\n                return response.json()\r\n            }).then(jsonData => {\r\n                this.setState({\r\n                    toplist: jsonData\r\n                })\r\n\r\n            });\r\n    }\r\n\r\n    addHighScore() {\r\n        if (this.state.name) {\r\n            this.props.addHighScore(this.state.name);\r\n            this.getHighScore();\r\n            //  this.setState({ name: '' });\r\n        } else {\r\n            alert('Enter name before submitting!')\r\n        }\r\n    }\r\n\r\n    renderToplist(type) {\r\n        const highScore = this.state.toplist[type];\r\n        if (highScore) {\r\n            const toplist = highScore.map((entry, index) => {\r\n                return (<tr key={index}>\r\n                    <td key={index + 1}>{index + 1}</td>\r\n                    <td key={index + 2} >{entry.name}</td>\r\n                    <td key={index + 3} >{entry.rounds}</td>\r\n                    <td key={index + 4} >{entry.time}</td>\r\n                </tr>)\r\n            })\r\n\r\n            return (\r\n                <table className='toplistTable' >\r\n                    <thead><tr><th>Pos</th><th>Name</th><th>Rounds</th><th>Time</th></tr></thead>\r\n                    <tbody>{toplist}</tbody>\r\n                </table>)\r\n        } else {\r\n            return 'waiting on server';\r\n        }\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.setState({ name: e.target.value })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getHighScore();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.getHighScore();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='toplist'>\r\n                <div className='input'>\r\n                    <input\r\n                        placeholder=\"Enter your name\"\r\n                        onChange={this.handleNameChange}\r\n                    />\r\n                    <button type='submit' onClick={this.addHighScore}>Save Result</button>\r\n\r\n                </div>\r\n\r\n                <div className='outerToplistContainer'>\r\n\r\n                    <div className='toplistContainer'>\r\n                        <div className='toplistRound'>\r\n                            <h4>Fewest Rounds</h4>\r\n                            {this.renderToplist('rounds')}\r\n                        </div>\r\n                        <div className='toplistTime'>\r\n                            <h4>Fastest Time</h4>\r\n                            {this.renderToplist('time')}\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HighScore;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Board from '../Board/Board.js'\nimport HighScore from '../HighScore/HighScore.js';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [{\n        value: '',\n        id: '',\n        isFlipped: false,\n        found: false,\n      }],\n      time: 0\n    }\n\n    this.foundCorrect = 0;\n    this.flippedCards = 0;\n    this.numRounds = 0;\n    this.lowestScore = '-';\n    this.posted = false;\n\n    this.onFlip = this.onFlip.bind(this);\n    this.setBoard = this.setBoard.bind(this);\n    this.shuffleBoard = this.shuffleBoard.bind(this);\n    this.checkMatch = this.checkMatch.bind(this);\n    this.resetFlipped = this.resetFlipped.bind(this);\n    this.addRound = this.addRound.bind(this);\n    this.checkFinished = this.checkFinished.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.putHighScore = this.putHighScore.bind(this);\n  }\n\n  putHighScore(name) {\n    if (this.foundCorrect === 8 && !this.posted) {\n\n      const backendURL = false ? 'http://localhost:5000/' : 'https://wiking7.herokuapp.com/';\n      console.log(backendURL)\n      const url = backendURL + 'api/highScore';\n      const newEntry = JSON.stringify({ name: name, score: this.numRounds, time: this.state.time });\n      console.log('posting front');\n      console.log(newEntry);\n      fetch(url, {\n        method: 'POST',\n        body: newEntry,\n        headers: { 'Content-Type': 'application/json' }\n      })\n      this.posted = true;\n    } else if (this.foundCorrect < 8) {\n      alert('You must finish the game before submitting score!')\n    } else if (this.posted) {\n      alert('Already posted!')\n    }\n\n  }\n\n  setBoard() {\n    let cardsArray = [];\n    let k = 0;\n    for (let i = 1; i < 9; i++) {\n      cardsArray.push({ value: i, id: k, isFlipped: false, found: false });\n      cardsArray.push({ value: i, id: k + 1, isFlipped: false, found: false });\n      k = k + 2;\n    }\n    let shuffledArray = this.shuffleBoard(cardsArray);\n    this.setState({ cards: shuffledArray });\n    this.foundCorrect = 0;\n    this.flippedCards = 0;\n    this.numRounds = 0;\n    this.posted = false;\n    clearInterval(this.interval);\n    this.setState({ time: 0 });\n    this.interval = setInterval(() => this.setState({ time: this.state.time + 1 }), 1000);\n  }\n\n\n  shuffleBoard(cardsArray) {\n    let array = cardsArray;\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  onFlip(id) {\n    let cardsArray = this.state.cards;\n    if (this.flippedCards === 2) {\n      this.resetFlipped()\n    }\n\n    // flip card in card state\n    for (let i = 0; i < cardsArray.length; i++) {  // find what card was flipped...\n      if (cardsArray[i].id === id) {\n        if (cardsArray[i].isFlipped || cardsArray[i].found) {\n          break;\n        }\n        this.flippedCards += 1;\n        cardsArray[i].isFlipped = true;\n\n        //        // flip one card\n        this.setState({    // update state\n          cards: cardsArray,\n        });\n      }\n    }\n\n\n    if (this.flippedCards === 2) {\n      this.checkMatch()\n      this.addRound();\n      this.checkFinished();\n    }\n    // check match if there are two flipped cards\n    //   }\n    // }\n  }\n\n  addRound() {\n    this.numRounds += 1;\n  }\n\n  checkFinished() {\n    if (this.foundCorrect === 8) {\n      clearInterval(this.interval);\n      this.updateScore();\n    }\n  }\n\n  updateScore() {\n    if (!this.lowestScore) {\n      this.lowestScore = this.numRounds;\n    } else if (this.numRounds < this.lowestScore) {\n      this.lowestScore = this.numRounds;\n    }\n  }\n\n  checkMatch() {\n    let cardsArray1 = this.state.cards;\n    // find what 2 cards that are flipped open\n    let openCards = cardsArray1.filter(card => card.isFlipped && !card.found);\n\n    // check if two cards have same value\n    if (openCards[0].value === openCards[1].value) {\n      // if match update card state to found\n      let cardsArray = this.state.cards;\n      for (let i = 0; i < cardsArray.length; i++) {\n        if (cardsArray[i].value === openCards[0].value) {\n          // update state to found\n          cardsArray[i].found = true;\n        }\n      }\n      //update state\n      this.setState({\n        cards: cardsArray\n      });\n      this.foundCorrect += 1;\n      this.flippedCards = 0;\n    }\n\n  }\n\n  resetFlipped() {\n    let cardsArray = this.state.cards;\n    for (let i = 0; i < cardsArray.length; i++) {\n      // flip card if not already found\n      if (!cardsArray[i].found) {\n        cardsArray[i].isFlipped = false;\n      }\n    }\n    // update state and reset flipped cards counter\n\n    this.setState({\n      cards: cardsArray\n    });\n    this.flippedCards = 0;\n  }\n\n  componentDidMount() {\n    this.setBoard();\n  }\n\n  render() {\n    return (\n      <div className='outerContainer' >\n\n        <div className='gameContainer'>\n          <Board onLoad={this.setBoard} onFlip={this.onFlip} cards={this.state.cards} />\n        </div>\n\n        <div className='menuScoreContainer'>\n\n          <div className='menuContainer'>\n            <div className='dataBar'>            <button className='start-button' onClick={() => {\n              this.setBoard()\n            }\n            }>Restart</button>\n            </div>\n\n            <div className='dataBar'>\n              <p>Time:</p>\n              <p> {this.state.time}</p>\n            </div>\n\n\n            <div className='dataBar'>\n              <p>Round:</p>\n              <p> {this.numRounds}</p>\n            </div>\n\n            <div className='dataBar'>\n              <p>Correct:</p>\n              <p> {this.foundCorrect} / 8</p>\n            </div>\n\n            <div className='dataBar'>\n              <p>Best score: </p>\n              <p>{this.lowestScore ? this.lowestScore : '-'}</p>\n            </div>\n          </div>\n          <div className='highScoreContainer'>\n            <HighScore addHighScore={this.putHighScore} />\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// // <React.StrictMode>\n// <App /> ,\n// {/* </React.StrictMode>, */}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}