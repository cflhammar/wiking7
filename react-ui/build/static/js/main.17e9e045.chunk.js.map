{"version":3,"sources":["components/App/App.js","reportWebVitals.js","index.js"],"names":["App","props","state","cards","value","id","isFlipped","found","foundCorrect","flippedCards","numRounds","lowestScore","onFlip","bind","setBoard","shuffleBoard","checkMatch","resetFlipped","addRound","checkFinished","updateScore","componentDidMount","putHighScore","name","this","newEntry","JSON","stringify","score","fetch","backendURL","method","body","headers","alert","cardsArray","k","i","push","shuffledArray","setState","array","length","j","Math","floor","random","console","log","openCards","filter","card","className","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17e9e045.chunk.js","sourcesContent":["import React from 'react';\n//import './App.css';\n//import Board from '../Board/Board.js'\n//import HighScore from '../HighScore/HighScore.js'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards: [{\n        value: '',\n        id: '',\n        isFlipped: false,\n        found: false,\n      }],\n\n    }\n\n    this.foundCorrect = 0;\n    this.flippedCards = 0;\n    this.numRounds = 0;\n    this.lowestScore = '';\n\n    this.onFlip = this.onFlip.bind(this);\n    this.setBoard = this.setBoard.bind(this);\n    this.shuffleBoard = this.shuffleBoard.bind(this);\n    this.checkMatch = this.checkMatch.bind(this);\n    this.resetFlipped = this.resetFlipped.bind(this);\n    this.addRound = this.addRound.bind(this);\n    this.checkFinished = this.checkFinished.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.putHighScore = this.putHighScore.bind(this);\n\n  }\n\n  putHighScore(name) {\n    if (this.foundCorrect === 8) {\n      const backendURL = 'https://wiking7.herokuapp.com/' //'http://localhost:3001/'\n      const url = backendURL + 'api/highScore';\n      const newEntry = JSON.stringify({ name: name, score: this.numRounds });\n\n      fetch(url, {\n        method: 'POST',\n        body: newEntry,\n        headers: { 'Content-Type': 'application/json' }\n      })\n      this.setBoard();\n    } else {\n      alert('You must finish the game before submitting score!')\n    }\n    //.then(() => {\n\n    //this.getHighScore();\n    //this.setState({ name: '' });\n    //})\n\n  }\n\n  setBoard() {\n    let cardsArray = [];\n    let k = 0;\n    for (let i = 1; i < 9; i++) {\n      cardsArray.push({ value: i, id: k, isFlipped: false, found: false });\n      cardsArray.push({ value: i, id: k + 1, isFlipped: false, found: false });\n      k = k + 2;\n    }\n    let shuffledArray = this.shuffleBoard(cardsArray);\n    this.setState({ cards: shuffledArray });\n    this.foundCorrect = 0;\n    this.flippedCards = 0;\n    this.numRounds = 0;\n  }\n\n\n  shuffleBoard(cardsArray) {\n    let array = cardsArray;\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  onFlip(id) {\n    let cardsArray = this.state.cards;\n    if (this.flippedCards === 2) {\n      this.resetFlipped()\n    }\n\n    // flip card in card state\n    for (let i = 0; i < cardsArray.length; i++) {  // find what card was flipped...\n      if (cardsArray[i].id === id) {\n        if (cardsArray[i].isFlipped || cardsArray[i].found) {\n          break;\n        }\n        this.flippedCards += 1;\n        cardsArray[i].isFlipped = true;\n\n        //        // flip one card\n        this.setState({    // update state\n          cards: cardsArray,\n        }, () => {\n          console.log('card flipped');\n        });\n      }\n    }\n\n\n    if (this.flippedCards === 2) {\n      this.checkMatch()\n      this.addRound();\n      this.checkFinished();\n    }\n    // check match if there are two flipped cards\n    //   }\n    // }\n  }\n\n  addRound() {\n    this.numRounds += 1;\n  }\n\n  checkFinished() {\n    if (this.foundCorrect === 8) {\n      this.updateScore();\n    }\n  }\n\n  updateScore() {\n    if (!this.lowestScore) {\n      this.lowestScore = this.numRounds;\n    } else if (this.numRounds < this.lowestScore) {\n      this.lowestScore = this.numRounds;\n    }\n  }\n\n  checkMatch() {\n    let cardsArray1 = this.state.cards;\n    // find what 2 cards that are flipped open\n    let openCards = cardsArray1.filter(card => card.isFlipped && !card.found);\n\n    // check if two cards have same value\n    if (openCards[0].value === openCards[1].value) {\n      // if match update card state to found\n      let cardsArray = this.state.cards;\n      for (let i = 0; i < cardsArray.length; i++) {\n        if (cardsArray[i].value === openCards[0].value) {\n          // update state to found\n          cardsArray[i].found = true;\n        }\n      }\n      //update state\n      this.setState({\n        cards: cardsArray\n      });\n      this.foundCorrect += 1;\n      this.flippedCards = 0;\n    }\n\n  }\n\n  resetFlipped() {\n    let cardsArray = this.state.cards;\n    for (let i = 0; i < cardsArray.length; i++) {\n      // flip card if not already found\n      if (!cardsArray[i].found) {\n        cardsArray[i].isFlipped = false;\n      }\n    }\n    // update state and reset flipped cards counter\n\n    this.setState({\n      cards: cardsArray\n    });\n    this.flippedCards = 0;\n  }\n\n  componentDidMount() {\n    this.setBoard();\n  }\n\n\n  render() {\n\n    return (\n      <div className='Full' >\n        <div className='Full2'>\n\n          <div className='Data'>\n            <button className='start-button' onClick={() => {\n              this.setBoard()\n            }\n            }>Restart Game</button>\n            <div className='data-inside'>\n              <p>Correct:</p>\n              <p> {this.foundCorrect} / 8</p>\n            </div>\n            <div className='data-inside'>\n              <p>Round:</p>\n              <p> {this.numRounds}</p>\n            </div>\n            <div className='data-inside'>\n              <p>Best score: </p>\n              <p>{this.lowestScore}</p>\n            </div>\n          </div>\n\n          <div className='Gameboard'>\n            {/* <Board onLoad={this.setBoard} onFlip={this.onFlip} cards={this.state.cards} /> */}\n          </div>\n        </div>\n        {/* <HighScore addHighScore={this.putHighScore} /> */}\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}